knitr::opts_chunk$set(echo = TRUE)
data <- read.delim("https://www.stat.berkeley.edu/users/census/gibson.txt")
View(data)
data <- read.table("https://www.stat.berkeley.edu/users/census/gibson.txt")
View(data)
library(dplyr)
library(naniar)
V6 = c(-1))
data %>%
replace_with_na(replace = list(V1 = c(-1),
V2 = c(-1),
V3 = c(-1),
V4 = c(-1),
V5 = c(-1),
V6 = c(-1)))
data <- data %>%
replace_with_na(replace = list(V1 = c(-1),
V2 = c(-1),
V3 = c(-1),
V4 = c(-1),
V5 = c(-1),
V6 = c(-1)))
cor(data$V2, data$V6)
cor(na.omit(data$V2, data$V6))
cor(na.omit(data$V2), na.omit(data$V6))
is.na(data$V2)
count(is.na(data$V2))
v2_without_na <- na.omit(data$V2)
v6_without_na <- na.omit(data$V6)
cor(data$V2, data$V6, na.rm = TRUE)
cor(data$V2, data$V6, use = "complete.obs")
masses_repression <- cor(data$V2, data$V6, use = "complete.obs")
print(masses_repression)
elites_repression <- cor(data$V4, data$V6, use = "complete.obs")
print(elites_repression)
elites_masses <- cor(data$V4, data$V2, use = "complete.obs")
print(elites_masses)
data <- mutate(data,
weighted_v2 = V2/(v3+V5))
data <- mutate(data,
weighted_v2 = V2/(V3+V5))
data <- mutate(data,
weighted_v4 = V4/(V3+V5))
lm(V6 ~ weighted_v2 + weighted_v4, data=data)
data <- mutate(data,
weighted_v6 = V6/(V3+V5))
lm(weighted_v6 ~ weighted_v2 + weighted_v4, data=data)
data <- na.omit(data)
count(data$weighted_v2)
length(data$weighted_v2)
lm(weighted_v6 ~ weighted_v2 + weighted_v4, data=data)
lm(V6 ~ weighted_v2 + weighted_v4, data=data)
data <- mutate(data,
weighted_v2 = V2/sqrt(V3+V5))
data <- mutate(data,
weighted_v4 = V4/sqrt(V3+V5))
lm(V6 ~ weighted_v2 + weighted_v4, data=data)
data <- mutate(data,
weighted_v6 = V6/sqrt(V3+V5))
data <- mutate(data,
weighted_v2 = V2/sqrt(V3+V5))
data <- mutate(data,
weighted_v6 = V6/sqrt(V3+V5))
data <- mutate(data,
weighted_v4 = V4/sqrt(V3+V5))
lm(weighted_v6 ~ weighted_v2 + weighted_v4, data=data)
data <- mutate(data,
weighted_v2 = V2*sqrt(V3+V5))
data <- mutate(data,
weighted_v6 = V6*sqrt(V3+V5))
data <- mutate(data,
weighted_v4 = V4*sqrt(V3+V5))
lm(weighted_v6 ~ weighted_v2 + weighted_v4, data=data)
lm(V6 ~ weighted_v2 + weighted_v4, data=data)
lm(V6 ~ V2 + V4, data=data)
# now we try with the weights
lm(V6 ~ weighted_v2 + weighted_v4, data=data)
# now we try with the weights
lm(weighted_v6 ~ weighted_v2 + weighted_v4, data=data)
data <- mutate(data,
weighted_v2 = V2/(V3+V5))
data <- mutate(data,
weighted_v6 = V6/V3+V5))
data <- mutate(data,
weighted_v2 = V2/(V3+V5))
data <- mutate(data,
weighted_v6 = V6/(V3+V5))
data <- mutate(data,
weighted_v4 = V4/(V3+V5))
# now we try with the weights
lm(weighted_v6 ~ weighted_v2 + weighted_v4, data=data)
# now we try with the weights
lm(V6 ~ weighted_v2 + weighted_v4, data=data)
# first we standardize
data <- mutate(data,
v2_st = scale(V2))
mean(data$v2_st)
sd(data$v2_st)
data <- mutate(data,
v4_st = scale(V4))
data <- mutate(data,
v6_st = scale(V6))
data <- mutate(data,
v2_st = scale(V2))
data <- mutate(data,
v4_st = scale(V4))
data <- mutate(data,
v6_st = scale(V6))
# then we weight
data <- mutate(data,
v2_st_wt = v2_st/sqrt(V3 + V5))
data <- mutate(data,
v4_st_wt = v4_st/sqrt(V3 + V5))
data <- mutate(data,
v6_st_wt = v6_st/sqrt(V3 + V5))
lm(v6_st_wt ~ v4_st_wt + v2_st_wt, data=data)
lm(V6 ~ v4_st_wt + v2_st_wt, data=data)
data <- mutate(data,
v2_st_wt = v2_st*sqrt(V3 + V5))
data <- mutate(data,
v4_st_wt = v4_st*sqrt(V3 + V5))
data <- mutate(data,
v6_st_wt = v6_st*sqrt(V3 + V5))
lm(V6 ~ v4_st_wt + v2_st_wt, data=data)
data <- mutate(data,
v2_st_wt = v2_st*sqrt(V3 + V5))
data <- mutate(data,
v4_st_wt = v4_st*sqrt(V3 + V5))
data <- mutate(data,
v6_st_wt = v6_st*sqrt(V3 + V5))
lm(V6 ~ v4_st_wt + v2_st_wt, data=data)
lm(v6_st_wt ~ V2 + V4, data=data)
lm(v6_st_wt ~ v4_st_wt + v2_st_wt, data=data)
# then we weight
data <- mutate(data,
weight = sqrt(V3 + V5))
# then we weight
data <- mutate(data,
weight = sqrt(V3 + V5))
lm(v6_st ~ v4_st + v2_st, data=data, weights = weight)
lm(v6_st ~ v4_st + v2_st, data=data, weights = weight)
lm(V6 ~ v4_st + v2_st, data=data, weights = weight)
data <- na.omit(data) # first delete incomplete rows
library(dplyr)
library(naniar)
data <- read.table("https://www.stat.berkeley.edu/users/census/gibson.txt")
# first we replace the -1 with NA
data <- data %>%
replace_with_na(replace = list(V1 = c(-1),
V2 = c(-1),
V3 = c(-1),
V4 = c(-1),
V5 = c(-1),
V6 = c(-1)))
# first we try to calculate the first bivariation correlation
# coefficient
# between mass tolerance and repression
masses_repression <- cor(data$V2, data$V6, use = "complete.obs")
print(masses_repression)
# this does give us the number reported in figure 1
# what about elite tolerance and repression?
elites_repression <- cor(data$V4, data$V6, use = "complete.obs")
print(elites_repression)
# this does give us the number reported in figure 1
# finally, what about mass and elite tolerance?
elites_masses <- cor(data$V4, data$V2, use = "complete.obs")
print(elites_masses)
# same, it gives us the number from figure 1
data <- na.omit(data) # first delete incomplete rows
# first we standardize the variables
data_std <- data %>%
mutate(mass_std = (V2 - mean(V2))/sd(V2),
elite_std = (V4 - mean(V4))/sd(V4),
rep_std = (V6 - mean(V6))/sd(V6))
View(data_std)
data <- na.omit(data) # first delete incomplete rows
# first we standardize the variables
data <- data %>%
mutate(mass_std = (V2 - mean(V2))/sd(V2),
elite_std = (V4 - mean(V4))/sd(V4),
rep_std = (V6 - mean(V6))/sd(V6))
# then we create weights, which should be square root of n
data <- mutate(data,
weight = sqrt(V3 + V5))
lm(rep_std ~ elite_std + mass_std, data=data, weights = weight)
data <- data %>%
mutate(mass_std_weight = mass_std*weight,
elite_std_weight = elite_std*weight,
rep_std_weight = rep_std*weight)
lm(rep_std_weight ~ elite_std_weight + mass_std_weight, data=data)
lm(V6 ~ V2 + V4, data=data)
lm(rep_std ~ elite_std + mass_std, data=data)
# what if instead we only weight
data <- data %>%
mutate(mass_weight = V2*weight,
elite_weight = V4*weight,
rep_weight = V6*weight)
lm(rep_weight ~ elite_weight + mass_weight, data=data)
# first we standardize the variables
data <- data %>%
mutate(mass_std = scale(V2),
elite_std = scale(V4),
rep_std = scale(V6))
# then we create weights, which should be square root of n
data <- mutate(data,
weight = sqrt(V3 + V5))
data <- data %>%
mutate(mass_std_weight = mass_std*weight,
elite_std_weight = elite_std*weight,
rep_std_weight = rep_std*weight)
lm(rep_std ~ elite_std + mass_std, data=data, weights = weight) # nope
lm(rep_std_weight ~ elite_std_weight + mass_std_weight, data=data) # no
mean(data$mass_std)
knitr::opts_chunk$set(echo = TRUE)
data <- read_dta("camp1.dta")
data <- haven :: read_dta("camp1.dta")
View(data)
